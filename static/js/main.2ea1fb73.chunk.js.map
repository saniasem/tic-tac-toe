{"version":3,"sources":["Cell.js","Board.js","Game.js","serviceWorker.js","index.js"],"names":["Cell","props","value","onClick","react_default","a","createElement","className","Board","_this$props","this","cells","map","cell","index","src_Cell","key","renderCells","React","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","_this$state","state","stepCounter","whoNext","winner","toConsumableArray","getWinner","setState","resetGame","Array","fill","gameStatus","_this$state2","concat","renderResetButton","src_Board","_winLines$filter","filter","combination","_combination","slicedToArray","b","c","winCombination","Boolean","window","location","hostname","match","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ea1fb73.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Cell(props) {\r\n    const {value, onClick} = props;\r\n    return (\r\n        <div className=\"board-cell\"  onClick={onClick}>\r\n            {value}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderCells() {\r\n        const {cells, onClick} = this.props;\r\n        return cells.map( (cell, index) => {\r\n            return (\r\n                <Cell value={cell} \r\n                key={'cell-' + index} \r\n                onClick={() => onClick(index)}/>\r\n            );\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className='board'>\r\n            {this.renderCells()}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\nimport Board from './Board';\nimport './App.css';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cells: Array(9).fill(null),\n      stepCounter: 1,\n      whoNext: 'X',\n      winner: null\n    } \n  }\n\n  handleClick = (index) => {\n    let {cells, stepCounter, whoNext, winner} = this.state;\n    cells = [...cells];\n    if(cells[index] || winner) return;\n    cells[index] = whoNext;\n    whoNext = whoNext === 'X' ? '0' : 'X';\n    stepCounter = stepCounter + 1;\n    winner = this.getWinner(cells);\n    this.setState({\n      cells,\n      whoNext,\n      stepCounter,\n      winner\n    })\n  }\n\n  resetGame = () => {\n    this.setState({\n      cells: Array(9).fill(null),\n      stepCounter: 1,\n      whoNext: 'X',\n      winner: null\n    }); \n  }\n\n  renderResetButton(winner, stepCounter) {\n    if(winner || stepCounter === 10) {\n      return <button onClick={this.resetGame}>New Game</button>\n    }\n  }\n\n  render() {\n    const {cells, whoNext, winner, stepCounter} = this.state;\n    let  gameStatus;\n    if (winner) {\n      gameStatus = `Player ${winner} wins!`;\n    } else if (stepCounter === 10) {\n      gameStatus = 'It is DRAW!';\n    } else {\n      gameStatus = `Player ${whoNext}, your turn`\n    }\n    return (\n      <div className=\"Game\">\n        <h1>Tic Tac Toe, step: {stepCounter}</h1>\n        <h3> {gameStatus} </h3>\n        {this.renderResetButton(winner, stepCounter)}\n\n        <Board cells={cells} onClick={this.handleClick}/>\n      </div>\n    );\n  }\n\n  getWinner(cells) {\n    const winLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    const [winCombination] = winLines.filter( (combination) => {\n      let [a,b,c] = combination;   \n      return cells[a] && cells[a] === cells[b] && cells[b] === cells[c];\n    });\n    if (winCombination) {\n      return cells[winCombination[0]];    \n    } else {\n      return null;\n    }\n  }\n  \n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}